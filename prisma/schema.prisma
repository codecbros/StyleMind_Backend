// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SystemRole {
  ADMIN
  USER
}

model User {
  id                 String     @id @default(cuid())
  email              String     @unique
  firstName          String     @map("first_name") @db.VarChar(255)
  lastName           String     @map("last_name") @db.VarChar(255)
  password           String     @db.VarChar(255)
  status             Boolean    @default(true)
  createdAt          DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt          DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  bodyDescription    String?    @map("body_description") @db.Text
  profileDescription String?    @map("profile_description") @db.Text
  profilePicture     String?    @map("profile_picture")
  weight             Int?       @db.Integer
  height             Int?       @db.Integer
  systemRole         SystemRole @default(USER) @map("system_role")
  birthDate          DateTime?  @map("birth_date") @db.Date

  sessions          Session[]
  roles             UserRole[]
  wardrobeItems     WardrobeItem[]
  combinations      Combination[]
  savedCombinations SavedCombination[]
  likes             like[]
  comments          comment[]
  followers         follower[]         @relation("UserFollowers")
  following         follower[]         @relation("UserFollowing")
  suscriptions      Suscription[]
  usageTracking     UsageTracking[]
  Category          Category[]         @relation("CategoryCreatedBy")

  @@map("users")
}

model Session {
  id        String    @id @default(cuid())
  firstDate DateTime  @default(now()) @map("first_date") @db.Timestamptz()
  lastDate  DateTime? @map("last_date") @db.Timestamptz()
  userId    String    @map("user_id")
  user      User      @relation(fields: [userId], references: [id])
  failed    Boolean   @default(false)

  @@map("sessions")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  status      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  users     UserRole[]
  menuItems MenuItems[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  roleId    String   @map("role_id")
  user      User     @relation(fields: [userId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])
  status    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("user_roles")
}

model MenuItems {
  id          String     @id @default(cuid())
  item        String
  url         String
  icon        String
  parentId    String?
  parent      MenuItems? @relation("Parent", fields: [parentId], references: [id])
  description String?    @db.Text
  position    Int        @default(0)
  status      Boolean    @default(true)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime   @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  roleId      String     @map("role_id")
  role        Role       @relation(fields: [roleId], references: [id])

  children MenuItems[] @relation("Parent")

  @@map("menu_items")
}

model WardrobeItem {
  id             String   @id @default(cuid())
  name           String
  description    String?  @db.Text
  status         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id])
  season         String
  primaryColor   String   @map("primary_color")
  secondaryColor String?  @map("secondary_color")
  style          String
  material       String
  size           String

  images       Image[]
  categories   WardrobeCategory[]
  combinations CombinationItem[]

  @@map("wardrobe_items")
}

model Image {
  id             String       @id @default(cuid())
  url            String
  description    String?      @db.Text
  status         Boolean      @default(true)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  wardrobeItemId String       @map("wardrobe_item_id")
  wardrobeItem   WardrobeItem @relation(fields: [wardrobeItemId], references: [id])

  @@map("images")
}

model Category {
  id             String   @id @default(cuid())
  name           String
  description    String?  @db.Text
  status         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  isPublic       Boolean  @default(false) @map("is_public")
  isDefault      Boolean  @default(false) @map("is_default")
  createdById    String?  @map("created_by_id")
  createdBy      User?    @relation("CategoryCreatedBy", fields: [createdById], references: [id])
  deletedByAdmin Boolean  @default(false) @map("deleted_by_admin")

  wardrobeItems WardrobeCategory[]

  @@map("categories")
}

model WardrobeCategory {
  id             String       @id @default(cuid())
  wardrobeItemId String       @map("wardrobe_item_id")
  categoryId     String       @map("category_id")
  wardrobeItem   WardrobeItem @relation(fields: [wardrobeItemId], references: [id])
  category       Category     @relation(fields: [categoryId], references: [id])
  status         Boolean      @default(true)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("wardrobe_categories")
}

model Combination {
  id            String   @id @default(cuid())
  name          String
  description   String?  @db.Text
  status        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  userId        String   @map("user_id")
  user          User     @relation(fields: [userId], references: [id])
  isAIGenerated Boolean  @default(false) @map("is_ai_generated")
  likes_count   Int?     @default(0) @map("likes_count")
  occasions     String[]
  aiDescription String?  @map("ai_description") @db.Text

  items             CombinationItem[]
  savedCombinations SavedCombination[]
  likes             like[]
  comments          comment[]

  @@map("combinations")
}

model CombinationItem {
  id             String       @id @default(cuid())
  combinationId  String       @map("combination_id")
  wardrobeItemId String       @map("wardrobe_item_id")
  combination    Combination  @relation(fields: [combinationId], references: [id])
  wardrobeItem   WardrobeItem @relation(fields: [wardrobeItemId], references: [id])
  status         Boolean      @default(true)
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt      DateTime     @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  position       Int          @default(0)

  @@map("combination_items")
}

model SavedCombination {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  combinationId String      @map("combination_id")
  user          User        @relation(fields: [userId], references: [id])
  combination   Combination @relation(fields: [combinationId], references: [id])
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("saved_combinations")
}

model like {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  combinationId String      @map("combination_id")
  user          User        @relation(fields: [userId], references: [id])
  combination   Combination @relation(fields: [combinationId], references: [id])
  status        Boolean     @default(true)
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("likes")
}

model comment {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  combinationId String      @map("combination_id")
  user          User        @relation(fields: [userId], references: [id])
  combination   Combination @relation(fields: [combinationId], references: [id])
  status        Boolean     @default(true)
  comment       String      @db.Text
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("comments")
}

model follower {
  id         String   @id @default(cuid())
  userId     String   @map("user_id")
  followerId String   @map("follower_id")
  user       User     @relation("UserFollowers", fields: [userId], references: [id])
  follower   User     @relation("UserFollowing", fields: [followerId], references: [id])
  status     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("followers")
}

model PlanLimit {
  id          String   @id @default(cuid())
  name        String
  value       Int
  period      String
  description String?  @db.Text
  status      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()
  planId      String   @map("plan_id")
  plan        Plan     @relation(fields: [planId], references: [id])

  @@map("plan_limits")
}

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  status      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  limits        PlanLimit[]
  users         Suscription[]
  features      PlanFeature[]
  usageTracking UsageTracking[]

  @@map("plans")
}

model Suscription {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  planId       String    @map("plan_id")
  user         User      @relation(fields: [userId], references: [id])
  plan         Plan      @relation(fields: [planId], references: [id])
  status       Boolean   @default(true)
  startDate    DateTime  @map("start_date") @db.Timestamptz()
  endDate      DateTime  @map("end_date") @db.Timestamptz()
  trial        Boolean   @default(false)
  trialEndDate DateTime? @map("trial_end_date") @db.Timestamptz()
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt    DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("suscriptions")
}

model PlanFeature {
  id          String   @id @default(cuid())
  planId      String   @map("plan_id")
  plan        Plan     @relation(fields: [planId], references: [id])
  name        String
  description String?  @db.Text
  order       Int      @default(0)
  status      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  usageTracking UsageTracking[]

  @@map("plan_features")
}

model UsageTracking {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  planId      String      @map("plan_id")
  user        User        @relation(fields: [userId], references: [id])
  plan        Plan        @relation(fields: [planId], references: [id])
  featureId   String      @map("feature_id")
  feature     PlanFeature @relation(fields: [featureId], references: [id])
  value       Int
  period      String
  description String?     @db.Text
  status      Boolean     @default(true)
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("usage_tracking")
}
